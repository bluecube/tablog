import os

def bool_arg(s):
    if isinstance(s, bool):
        return s

    lc = s.lower()
    if lc in ["true", "y", "yes", "on"]:
        return True
    elif lc in ["false", "n", "no", "off"]:
        return False

    try:
        i = int(s)
    except ValueError:
        return bool(s)
    else:
        return bool(i)

def sanitizer_arg(s):
    if isinstance(s, bool):
        return s

    if s.lower() == "thread":
        return "thread"
    else:
        return bool_arg(s)

env = Environment(
    ENV={'PATH': os.environ['PATH']},
    COMPILATIONDB_USE_ABSPATH=True,
)

env.Tool('compilation_db')
env.CompilationDatabase()

env["sanitize"] = sanitizer_arg(ARGUMENTS.get("sanitize", True)) # True, False or "thread"
env["debug"] = bool_arg(ARGUMENTS.get("debug", True))
env["native"] = bool_arg(ARGUMENTS.get("native", True))
env["clang"] = bool_arg(ARGUMENTS.get("clang", False))

env.AppendUnique(
    CCFLAGS=["-std=c++17", "-fdiagnostics-color", "-Werror", "-Wall", "-Wextra"],
    CPPPATH=["#include"]
)

if env["debug"]:
    env.AppendUnique(
        CCFLAGS=["-g", "-O0"],
    )
else:
    env.AppendUnique(
        CCFLAGS=["-O3", "-flto", "-DNDEBUG"],
    )

if env["sanitize"]:
    if env["sanitize"] == "thread":
        san_list = ["thread"]
    else:
        san_list = ["address", "undefined", "leak"]

    formated_sanitizers = ["-fsanitize={}".format(san) for san in san_list]
    env.AppendUnique(
        CCFLAGS=formated_sanitizers,
    )

if env["native"]:
    env.AppendUnique(
        CCFLAGS=["-march=native"],
    )

if env["clang"]:
    env.Tool("clang")
    env.Tool("clangxx")

env.AppendUnique(LINKFLAGS=env["CCFLAGS"])

Export("env")

# SConscript("src/SConscript", variant_dir="build", duplicate=False)  # No src for now

test_env = env.Clone()
Export("test_env")

SConscript("tests/SConscript", variant_dir="build/tests", duplicate=False)
